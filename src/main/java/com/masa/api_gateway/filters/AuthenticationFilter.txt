/*
package com.masa.api_gateway.filters;

import com.masa.api_gateway.service.AuthService;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.Optional;

@Component
public class AuthenticationFilter implements GlobalFilter {
    private final AuthService authService;
    private final RouteLocator routeLocator;

    public AuthenticationFilter(RouteLocator routeLocator, AuthService authService) {
        this.routeLocator = routeLocator;
        this.authService = authService;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        String path = exchange.getRequest().getPath().toString();

        // Verificar si la ruta es pública
        if (isPublicRoute(path)) {
            return chain.filter(exchange); // Permitir el acceso sin validación
        }

        // Validar autorización para rutas protegidas
        String token = extractToken(exchange.getRequest());
        if (token == null) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }

        return authService.validateToken(token).flatMap(response -> {
            if (response.isValid()) {
                // Agregar información del usuario a la solicitud
                exchange.getRequest().mutate()
                        .header("X-User-ID", String.valueOf(response.getUserId()))
                        .header("X-User-Role", response.getRole());
                return chain.filter(exchange); // Desbloquea la ruta
            } else {
                exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
                return exchange.getResponse().setComplete();
            }
        });
    }

    private String extractToken(ServerHttpRequest request) {
        String authHeader = request.getHeaders().getFirst("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        return null;
    }


}
*/
